# This Python file uses the following encoding: utf-8# !/usr/bin/env python""" title: data extractor for crime map """import osimport djangoos.environ.setdefault("DJANGO_SETTINGS_MODULE", "proj_hkcm.settings")django.setup()import urllibimport urllib2import loggingfrom urllib2 import Request, urlopenfrom django.utils import timezoneimport geocoderfrom bs4 import BeautifulSoupimport pytzfrom hkcm.models import Cmdatafrom datetime import datetimeimport requestslog = logging.getLogger(__name__)# print ("--")if __name__ == "__main__":    start = timezone.localtime(timezone.now())    print("=============================")    print('$>>>>> start at:    %s' % start)    print("$----> Crawler starting... #####")    with open('/home/ubuntu/proj_hkcm/txt_csv_files/Lib1_ListOfCrime.txt', 'r+') as fc:        crimelines = [line[:-1] for line in fc]  # for escaping the newline next to the location string    with open('/home/ubuntu/proj_hkcm/txt_csv_files/Lib2_ListOfLocation.txt', 'r+') as fl:        localines = [line[:-1] for line in fl]  # for escaping the newline next to the location string    # req = Request('https://www.hk01.com/section/%E6%B8%AF%E8%81%9E',    #               headers={'User-Agent': 'Mozilla/5.0'})    # page = urlopen(req).read()    url = 'https://www.hk01.com/section/%E6%B8%AF%E8%81%9E'    page = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'}).content    soup = BeautifulSoup(page, 'lxml')    collection = soup.find_all("div", class_="blog_listing__item")    print("         #1. Number of news found: " + str(len(collection)))    # orig_stdout = sys.stdout    # f1 = open('/home/ubuntu/proj_hkcm/txt_csv_files/TitleUrlPairs.txt', 'w')    # sys.stdout = f1    counter = 0    for member in collection:        issue_time = "not defined yet"        data_rec = ()        counter += 1        print(counter)        title = member.find("h3")        title = title.string        title = title.encode('utf8')        print("title: " + title)        ref = member.find('a').get('href')        # for reading url containing Traditional Chinese words        refpart2 = ref[21:]        s = refpart2        # print("???????")        # print(type(s))        # print(s)        s = s.encode('utf8')        # print(type(s))        # print(s)        s = urllib.quote(s)        url = 'https://www.hk01.com/%s' % s        print(url)        # req2 = urllib2.Request(url)        page2 = requests.get(url,headers={'User-Agent': 'Mozilla/5.0'}).content        # req2.add_header('User-Agent', 'Mozilla/5.0')        # page2 = urllib2.urlopen(req2).read()        soup2 = BeautifulSoup(page2, 'lxml')        for crime in crimelines:            if crime not in title:                continue            else:  # crime in the title                if "爆竊" == crime or "肇禍" == crime:                    crimecat = "burglary"                elif "爆水管" == crime or "攻擊" == crime or "持械攻擊" == crime \                        or "持械大混戰" == crime or "刑毀" == crime or "射爆" == crime or "狙擊" == crime:                    crimecat = "violent crime"                elif "兇殺" == crime or "謀殺" == crime or "殺人" == crime or "猝死" == crime or "亡" == crime:                    crimecat = "homicide"                elif "搶劫" == crime or "搶掠" == crime or "行搶" == crime \                        or "劫" == crime or "劫案" == crime:                    crimecat = "robbery"                elif "打人" == crime or "逞兇" == crime or "卡位戰" == crime or "持刀追斬" == crime \                        or "襲警" == crime or "偷拍" == crime \                        or "傷人" == crime \                        or "家暴" == crime or "家庭暴力" == crime or "酒後駕車" == crime \                        or "酒駕" == crime or "毆打" == crime or "騷亂" == crime \                        or "暴力" == crime or "縱火" == crime:                    crimecat = "wounding and serious assault"                elif "緝毒" == crime or "毒駕" == crime or "毒品" == crime or "毒品買賣" == crime \                        or "買賣毒品" == crime or "毒品走私" == crime or "走私毒品" == crime or "吸食毒品" == crime:                    crimecat = "serious drug offenses"                elif "恐嚇" == crime:                    crimecat = "criminal intimidation"                elif "強暴" == crime or "賣淫" == crime or "性交易" == crime \                        or "強姦" == crime or "非禮" == crime or "騷擾" == crime or "性暴力" == crime:                    crimecat = "rape"                elif "偷竊" == crime or "盜竊" == crime or "闖空門" == crime:                    crimecat = "all thefts"                elif "扒竊" == crime or "打荷包" == crime:                    crimecat = "pickpocketing"                elif "失車" == crime or "劫車" == crime:                    crimecat = "motor vehicles reported missing"                elif "勒索" == crime or "詐騙" == crime or "行騙" == crime \                        or "物業騙案" == crime or "圍標案" == crime or "侵權" == crime:                    crimecat = "deception"                # else:                #     crimecat = "others"                if 3 == 2:                    # tod---->  loop the titles in DB,                    # compare to the current title,                    # if duplicated, "continue";else go go go.                    continue                else:                    for location in localines:                        if location not in title:                            contents = member.find(class_="blog_listing__item__content__caption")                            contents = str(contents)                            if location not in contents:                                continue                            else:                                g = geocoder.google(location)                                print(g)                                try:                                    lat = g.latlng[0]                                    lng = g.latlng[1]                                except IndexError:                                    break                                time_twins = soup2.find_all("div", class_="date")                                for tag in time_twins:                                    issue_time = tag.text.strip()[34:]                                    break                                try:                                    issue_time = datetime.strptime(issue_time, '%Y-%m-%d %H:%M')                                    issue_time = pytz.utc.localize(issue_time)                                except ValueError:                                    issue_time = timezone.localtime(timezone.now())                                    issue_time = datetime.strftime(issue_time, '%Y-%m-%d %H:%M')                                    issue_time = datetime.strptime(issue_time, '%Y-%m-%d %H:%M')                                    issue_time = pytz.utc.localize(issue_time)                                record = Cmdata(issuetime=issue_time,                                                location=location,                                                crime=crime,                                                crimecat=crimecat,                                                latitude=lat,                                                longitude=lng,                                                title=title,                                                URL=url)                                try:                                    record.save()                                except:                                    pass                            break                        else:  # location in title                            g = geocoder.google(location)                            # print (g)                            lat = g.latlng[0]                            lng = g.latlng[1]                            time_twins = soup2.find_all("div", class_="date")                            for tag in time_twins:                                issue_time = tag.text.strip()[18:35]                                print("=============================!!!!!!!!!!!!!!!")                                print(tag)                                print(issue_time)                                break                            # print("========$$$$$$$$$")                            # print(issue_time)                            issue_time = datetime.strptime(issue_time, '%Y-%m-%d %H:%M')                            issue_time = pytz.utc.localize(issue_time)                            record = Cmdata(issuetime=issue_time,                                            location=location,                                            crime=crime,                                            crimecat=crimecat,                                            latitude=lat,                                            longitude=lng,                                            title=title,                                            URL=url)                            try:                                record.save()                            except:                                pass                        break            break    end = timezone.localtime(timezone.now())    print("     #2. Time lapsed: " + str(end - start))    print("")    print("$----> data extractor ending... #####")    print('$>>>>> Ending time:  %s' % end)